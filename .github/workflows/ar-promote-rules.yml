name: AR Project Rule Promotion (Optional)

# NOTE: This workflow is safe to keep disabled or manual. It operates ONLY on the
# repository-local SQLite DB (data/chipax_data.db). For real promotions against a
# production DB you must mount or download a snapshot of that DB first.

on:
  workflow_dispatch:
    inputs:
      min_count:
        description: Minimum occurrences to promote a pattern
        default: '3'
        required: true
      dry_run_only:
        description: If true, only run dry-run (skip real promotion)
        required: false
        default: 'false'
  # To enable periodic execution uncomment the schedule block below.
  # schedule:
  #   - cron: '17 3 * * *'   # Every day at 03:17 UTC

permissions:
  contents: read
  actions: read
  # No write permissions needed; DB changes are ephemeral in CI unless you
  # deliberately commit artifacts or push to another branch.

concurrency:
  group: ar-promote-rules
  cancel-in-progress: false

jobs:
  promote:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        run: |
          pip install -r backend/requirements.txt || true

      - name: Ensure schema (best effort)
        run: |
          python tools/apply_schema.py --db data/chipax_data.db --schema tools/schema.sql || true

      - name: Dry run promotion
        id: dry
        run: |
          python tools/promote_ar_rules.py --db data/chipax_data.db --min-count "${{ github.event.inputs.min_count || '3' }}" --dry-run | tee promote_dry_run.json
          echo "dry_run_output=$(cat promote_dry_run.json | tr -d '\n' | sed 's/'/'"'"'/g')" >> $GITHUB_OUTPUT

      - name: Real promotion (if not dry_run_only)
        if: ${{ (github.event.inputs.dry_run_only != 'true') }}
        id: real
        run: |
          python tools/promote_ar_rules.py --db data/chipax_data.db --min-count "${{ github.event.inputs.min_count || '3' }}" | tee promote_real_run.json
          echo "real_output=$(cat promote_real_run.json | tr -d '\n' | sed 's/'/'"'"'/g')" >> $GITHUB_OUTPUT

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ar-rule-promotion-${{ github.run_number }}
          path: |
            promote_dry_run.json
            promote_real_run.json
          if-no-files-found: ignore

      - name: Generate AR rules stats (post-promotion)
        run: |
          python tools/ar_rules_stats.py --db data/chipax_data.db > ar_rules_stats.json || echo '{}' > ar_rules_stats.json
          python tools/gen_ar_rules_badge.py --stats ar_rules_stats.json --out ar_rules_coverage.svg || true

      - name: Upload stats artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ar-rules-stats-${{ github.run_number }}
          path: |
            ar_rules_stats.json
            ar_rules_coverage.svg
          if-no-files-found: ignore

      - name: Summary
        run: |
          echo "### AR Rule Promotion" >> $GITHUB_STEP_SUMMARY
          echo "Dry run output:" >> $GITHUB_STEP_SUMMARY
          cat promote_dry_run.json >> $GITHUB_STEP_SUMMARY || true
          if [ -f promote_real_run.json ]; then
            echo "\nReal run output:" >> $GITHUB_STEP_SUMMARY
            cat promote_real_run.json >> $GITHUB_STEP_SUMMARY
          else
            echo "\n(Real run skipped: dry_run_only=true)" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f ar_rules_stats.json ]; then
            echo "\nAR Rules Stats after promotion:" >> $GITHUB_STEP_SUMMARY
            cat ar_rules_stats.json >> $GITHUB_STEP_SUMMARY
          fi
